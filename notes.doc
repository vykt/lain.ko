[README]:
https://gist.github.com/17twenty/2930467

literally copy the src from here:
https://medium.com/@emanuele.santini.88/sysfs-in-linux-kernel-a-complete-guide-part-1-c3629470fc84


[WHAT TO USE]:
vmalloc - get continuous virtual mem, no need for kmalloc (phys cont.)


[INTERFACE]:
1 - read [val] of [size] at [addr]
2 - write [val] of [size] at [addr]

3 - get <len> of maps
4 - write maps to [buffer]


[IOCTL]:
-Have to call open() on device first.
-Means can maintain state between ioctl calls.


[MM_STRUCT]:
-Use VMA_ITERATOR macro to iterate over segments.
https://stackoverflow.com/questions/77836868/virtual-memory-traversal-in-linux-kernel-6-1-x-while-loading-kernel-modules


[PLAN]:
1) Define a new class called lain. This class will contain a kobject.

2) Create an attribute belonging to this class's kobject that displays the major number.




[NEW]:

-Make functions like read() and write() just return -EINVAL for the driver.

[get path]:

    -struct file f->f_path (struct path);
    -d_path() //return string version of path

[maps return structure]:

    vm_area_struct:

    -start addr                                   : vm_start
    -end addr                                     : vm_end
    -file offset (for backing file)               : vm_pgoff << PAGE_SHIFT
    -pathname (string, PATH_MAX)                  : d_path()
    -perm (bitmask: rwx(p/s) private=1, shared=0) : vm_page_prot


iterate over all tasks:
    -for_each_process(p) //macro
    -task_struct->pid    //check pid for match



PROCFS SOURCE:

base.c:928     - all mem operations

task_mmu.c:358 - all maps operations



ACCESSING MEM:
    
    -access_remote_vm() : read memory from another address space
